import greenfoot.*;
import java.util.List;
public class HugeBeam2 extends Beams{
    boolean pause = true,storing,b;
    GreenfootImage image,Ai,i,i2;
    int count = 0,mx,x,y,myx,myy,Aw,Ah,tocx,tocy,enx,eny;
    List enemyss,encans,cans;
    Enemys enemys;
    Encan encan;
    Mychr mychr;
    Can can;
    public HugeBeam2(boolean st){
        storing = st;
        setImage("Cannon/beam2.png");
        getImage().setTransparency(0);
    }

    public void act(){
        if(pause&&!storing){
            if(getY() < 315){
                x+=30;
                move(15);
                setImage("Cannon/beam2.png");
                getImage().scale(x,y);
                //i = getImage();
                //i2=new GreenfootImage(x,y);
            }else if(mx==x){
                store();
            }else{
                x-=30;
                move(15);
                setImage("Cannon/beam2.png");
                getImage().scale(x,y);
                //i = getImage();
                //i2=new GreenfootImage(x,y);
            }
            
            myx=getX();
            myy=getY();
            mychr = ((A)getWorld()).getMychr();
            enemyss = getWorld().getObjects(Enemys.class);
            encans = getWorld().getObjects(Encan.class);
            cans = getWorld().getObjects(Can.class);
            for(int i = 0;i < enemyss.size();i++){
                enemys = (Enemys)enemyss.get(i);
                enx = enemys.getImage().getWidth()/2;
                eny = enemys.getImage().getHeight()/2;
                if(!enemys.getStoring())
                    if(myy+x/2>enemys.getY()-eny&&myx-y/2<enemys.getX()+enx&&getX()+y/2>enemys.getX()-enx)
                        enemys.Damage(1000);
            }
            for(int i = 0;i < encans.size();i++){
                encan = (Encan)encans.get(i);
                enx = encan.getImage().getWidth()/2;
                eny = encan.getImage().getHeight()/2;
                if(!encan.getStoring())
                    if(myy+x/2>encan.getY()-eny&&myx-y/2<encan.getX()+enx&&getX()+y/2>encan.getX()-enx)
                        ((Encan)encans.get(i)).store();
            }
            for(int i = 0;i < cans.size();i++){
                can = (Can)cans.get(i);
                enx = can.getImage().getWidth()/2;
                eny = can.getImage().getHeight()/2;
                if(!can.getStoring())
                    if(myy+x/2>can.getY()-eny&&myx-y/2<can.getX()+enx&&getX()+y/2>can.getX()-enx)
                        ((Can)cans.get(i)).store();
            }
            if(mychr != null){
                if(myy+x/2>mychr.getY()-17&&myx-y/2<mychr.getX()+23&&getX()+y/2>mychr.getX()-23)
                    mychr.Damage(0.2,false);
            }

            /*enemys = (Enemys)getOneIntersectingObject(Enemys.class);
            encan = getOneIntersectingObject(Encan.class);
            mychr = (Mychr)getOneIntersectingObject(Mychr.class);
            can = (Can)getOneIntersectingObject(Can.class);
            if(enemys != null|| encan != null || mychr != null || can != null || getY() > 625){
            if(enemys != null){
            enemys.Damage(1000);
            }
            if(encan != null){
            ((Encan)encan).store();
            }
            if(mychr != null) {
            mychr.Damage(0.4,false);
            }
            if(can != null) {
            can.store();
            }
            }*/
        }
    }  

    public void inmap(int inx, int iny, int six, int siy){
        getImage().setTransparency(255);
        storing = false;
        setImage("Cannon/beam2.png");
        getImage().scale(six,siy);
        x=six;
        mx=six;
        y=siy;
        setLocation(inx, iny);
        mychr = ((A)getWorld()).getMychr();
    }

    public void store(){
        getImage().setTransparency(0);
        enemys = null;
        encan = null;
        mychr = null;
        can = null;
        setLocation(330,629);
        storing = true;
    }

    public boolean touch(Actor A){    
        Ai=A.getImage(); 
        myx=getX();
        myy=getY();
        tocx = A.getX();
        tocy = A.getY();
        Aw = Ai.getWidth();
        Ah = Ai.getHeight();
        i2.clear();
        i2.drawImage(Ai,tocx-myx-(Aw/2-x/2),tocy-myy-(Ah/2-y/2));
        for(int yi = 0; yi<y; yi++)  
            for(int xi = 0; xi<x; xi++)  
                if(i2.getColorAt(xi,yi).getAlpha()>0 && i.getColorAt(xi,yi).getAlpha()>0)  
                    return b=true;
        return b=false;  
    }

    public void Pausing(boolean pau){
        pause = pau;
    }

    public boolean getStoring(){
        return storing;
    }
}
